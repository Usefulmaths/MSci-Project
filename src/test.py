from Optimisation import Optimisation, Fidelity
from differential_evolution import differential_evolution
from qutip import *
from random import randrange
from mpi4py import MPI
from network_functions import quantum_half_adder


params = [-2.4764501239618935, 3.198258863942314, 1.481009228345492, -2.32427341734565, -2.6828543093743806, -1.0300440849821164, -0.06515406616522981, 0.016011954984280912, 0.08176085620778221, -2.777793878585307, 6.042329052553987, 8.144546085913888, -0.1898415137733435, -0.26534302260472525, -0.16057135621424365, 0.09249864883950715, -0.28996290290922677, -0.2077745679975183, 0.1444825788337967, -0.09113752649488019, -0.37082643675626464, 1.1625609039319964, 2.4059732397206335, -0.39491861351342017, -1.0041042571839875, 2.4495143775332178, 0.8582818080576833, 3.716778841069082, 4.847453567194182, -4.808086032852359]
params = [-2.5005587108837934, 3.074070046965013, 0.763874708124998, -3.5205212631236993, -3.0853477979972226, -0.8219773019007086, 0.08354121902457581, -0.006710797770474572, 0.01685068660147693, 0.43100625401773135, 8.3534385546647, 5.688691516660152, -0.3551409647594591, 0.12489999123028249, 0.13240248293309356, 0.08052881886746824, 0.08991510433546639, 0.11524728120539711, -0.08616548964801017, -0.11576662970087709, 0.10172534104839664, 2.8857583809497713, 1.5524822892277963, -0.08224612351945187, -2.637935802742654, 1.5327124634074782, -0.1089924902263226, 3.6766103214527823, 4.294126617944435, -4.438378579762967]
'''
[-1.2216556077986835, 0.3861802160075416,
-0.16847173315332314, -1.6944152822313892, 0.07973908860270418,
0.430418786545565, 0.009239836233685714, -0.03404154622009319,
-0.028447920320987124, -0.4036449030237737, 4.106397066316751,
4.339284932703095, 0.08203839070553098, -0.062229904566214765,
-0.20242451639141318, -0.09607937019680621, -0.24616175060527834,
-0.06727969551730686, -0.41066545496333834, -0.5955499616027922,
-2.1205088788997504, 2.4831420078702378, 2.1354172927614616,
-1.1825475963399334, -2.2376917113310677, 3.0966531725997877,
1.40560781533809, 3.8062341271532794, 5, -4.999996145828048]
'''
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

print('Starting rank: ', rank)

if(rank == 0):
	optimisation_problem = Optimisation(toffoli(), 4, "toffoli7")

	optimisation_problem.set_params(params)
	
	fid = optimisation_problem.fidelity_obj

	print(optimisation_problem.get_open_solution_fidelity())

	optimisation_problem.optimise_sgd(fid.likelihood, 2000, 0.01)
